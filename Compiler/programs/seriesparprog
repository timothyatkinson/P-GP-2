// Input: a connected host graph G.
// If G is series-parallel, the program returns G with an extra isolated node labelled "yes".
// If not, the program returns G with an extra isolated node labelled "no".

// The par and seq rules are the inverse of the graph grammar rules that define
// a series-parallel graph. A full reduction of a series-parallel graph using these 
// rules will produce a single edge. After a single application of deleteBase,
// a series-parallel graph will have reduced to the empty graph. Any other graph
// will have reduced to a non-empty graph.
Main = if ({par, seq}!; deleteBase; nonempty) then no else yes

// An alternate program that performs a destructive test on the host graph.
// The output is a single node labelled "yes" or "no". 
// Main = {par, seq}!; deleteBase; if nonempty then no else yes

par(a,b,x,y: int)
[ (n0, x) (n1, y) | (e0, n0, n1, a) (e0, n0, n1, b) ] 
=> 
[ (n0, x) (n1, y) | (e0, n0, n1, a) ]
interface = {n0, n1}

seq (a,b,x,y,z: int) 
[ (n0, x) (n1, y) (n2, z) | (e0, n0, n1, a) (e1, n1, n2, b)] 
=> 
[ (n0, x) (n2, z) | (e0, n0, n2, a) ]
interface = {n0, n2}

deleteBase (a, x, y: int) 
[ (n0, x) (n1, y) | (e0, n0, n1, a) ] 
=>
[  |  ]
interface = {}

nonempty (x: int) 
[ (n0, x) | ] 
=> 
[ (n0, x) | ]
interface = {n0}

yes () 
[ | ] 
=> 
[ (n0(R), "yes") | ]
interface = {}

no () 
[ | ] 
=> 
[ (n0(R), "no") | ]
interface = {}

